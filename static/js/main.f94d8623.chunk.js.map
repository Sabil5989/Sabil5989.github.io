{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","columns","setColumns","data","setData","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","workBook","XLSX","workSheetName","SheetNames","workSheet","Sheets","finalData","split","console","log","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","listItem","tempItem","items","replaceAll","item","processData","sheet_to_csv","header","readAsBinaryString","sortable","defaultSortField","sortIcon","pagination","highlightOnHover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSA2FeA,MAtFf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAoEb,OACE,gCACE,uDACA,uBACA,uBAAOC,KAAK,OAAOC,OAAO,kBAAkBC,SAlB7B,SAAAC,GACjB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAC,GACd,IAAMC,EAAOD,EAAIL,OAAOO,OAClBC,EAAWC,OAAUH,EAAM,CAAEX,KAAM,WACnCe,EAAgBF,EAASG,WAAW,GACpCC,EAAYJ,EAASK,OAAOH,IAzDlB,SAAAjB,GAElB,IAAMqB,EAAYrB,EAAKsB,MAAM,WAC7BC,QAAQC,IAAIH,GACZ,IAAMI,EAAUJ,EAAU,GAAGC,MAAM,uCACnCC,QAAQC,IAAIC,GAGZ,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAAIN,EAAUO,OAAQD,IAAK,CACzC,IAAME,EAAMR,EAAUM,GAAGL,MAAM,uCAC/B,GAAIG,GAAWI,EAAID,QAAUH,EAAQG,OAAQ,CAE3C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACD,KAARI,EAAE,KAAWA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACxB,KAAnBI,EAAEA,EAAEJ,OAAS,KAAWI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAExDH,EAAQM,KACVD,EAAIL,EAAQM,IAAMC,GAIlBE,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,GAC7CF,EAAKY,KAAKR,IAWhB,IALA,IAAIhC,EAAU2B,EAAQc,KAAI,SAAAC,GAAC,MAAK,CAC9BC,KAAMD,EACNE,SAAUF,MAGZ,MAAqBd,EAArB,eAA2B,CAAtB,IAAIiB,EAAQ,KACXC,EAAWD,EAASE,MAIxBD,GAFAA,GADAA,EAAWA,EAASE,WAAW,IAAK,MAChBA,WAAW,IAAK,OAEhBxB,MAAM,MAAMiB,KAAI,SAACQ,EAAMpB,GAAP,OAAa,4BAAYoB,GAAJpB,MACzDgB,EAASE,MAAQ,GACjBF,EAASE,MAAQD,EAEnBrB,QAAQC,IAAI1B,GACZG,EAAQyB,GACR3B,EAAWD,GAaTkD,CADahC,QAAWiC,aAAa9B,EAAW,CAAE+B,OAAQ,MAG5DzC,EAAO0C,mBAAmB7C,MAQxB,cAAC,IAAD,CACE8C,UAAQ,EACRC,iBAAiB,UACjBC,SAAU,cAAC,IAAD,IACVC,YAAU,EACVC,kBAAgB,EAChB1D,QAASA,EACTE,KAAMA,QCzECyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f94d8623.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport DataTable from \"react-data-table-component\";\nimport SortIcon from \"@material-ui/icons/ArrowDownward\";\n\nfunction App() {\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  const processData = data => {\n    //Copied from stack overflow to split and process the data from CSV file\n    const finalData = data.split(/\\r\\n|\\n/);\n    console.log(finalData);\n    const headers = finalData[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    console.log(headers);\n    const list = [];\n\n    for (let i = 1; i < finalData.length; i++) {\n      const row = finalData[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n\n   //Prepare Columns\n    var columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n\n    for (let listItem of list) {\n      var tempItem = listItem.items;\n      tempItem = tempItem.replaceAll(\":\", \"-\");\n      tempItem = tempItem.replaceAll(\";\", \"\\n\");\n      //To Split the data to new line code copied from https://www.jsdiaries.com/how-to-create-a-new-line-in-jsx-and-reactjs/\n      tempItem = tempItem.split(\"\\n\").map((item, i) => <p key={i}>{item}</p>);\n      listItem.items = [];\n      listItem.items = tempItem;\n    }\n    console.log(columns);\n    setData(list);\n    setColumns(columns);\n  };\n\n  // file upload\n  const fileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = evt => {\n      const bstr = evt.target.result;\n      const workBook = XLSX.read(bstr, { type: \"binary\" });\n      const workSheetName = workBook.SheetNames[0];\n      const workSheet = workBook.Sheets[workSheetName];\n      const data = XLSX.utils.sheet_to_csv(workSheet, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <h5>Ant Stack POC - React</h5>\n      <br/>\n      <input type=\"file\" accept=\".csv,.xlsx,.xls\" onChange={fileUpload} />\n      <DataTable\n        sortable\n        defaultSortField=\"orderId\"\n        sortIcon={<SortIcon />}\n        pagination\n        highlightOnHover\n        columns={columns}\n        data={data}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}